---
layout: layouts/base.njk
templateClass: tmpl-kids
---

<div id="games">
    <script id="snakes-and-mongooses">
        // game data
        const IN_PROGRESS = 'in progress'
        const TIE = 'tie'
        const WIN = 'win'

        const DEFAULT_GAME_STATE = {
          board: "---------",
          playerTurn: 'O', // human player is always O, goes first
          playing: false,
          winner: null,
          opponent: { // update this later using selectRandomOpponent()
            name: "Shirkhan"
          }
        }

        // functions to set DOM
        const clearCells = () => {
              const cellIds = ['0', '1', '2', '3', '4', '5', '6', '7', '8']
              cellIds.forEach(cellId => {
                const cell = document.getElementById(cellId)
                cell.innerText = ''
              })
        }
        const setSnakeBackground = (squareId) => {
            // assign the html elements such that squareId = the element ID
            const snakeSquare = document.getElementById(squareId)
            snakeSquare.className = "snake"
        }

        const setMongooseBackground = (squareId) => {
            // assign the html elements such that squareId = the element ID
            const mongooseSquare = document.getElementById(squareId)
            mongooseSquare.className = "mongoose"
        }
        // functions to handle the non-visual game play elements

String.prototype.replaceAt = function(index, replacement) {
  return this.substring(0, index) + replacement + this.substring(index + replacement.length);
}

function getRandomInt(max) {
  // HELP; use the internet!
  // returns random int with maximum value of max
  // your code goes here
}

const getEmptySquares = (board) => {
  // HELP!
  // use for dumb TTT opponent; return array of empty square indexes
  const emptySquares = []
  // your code goes here
  return emptySquares
}
const selectRandomOpponent = () => {
  // random opponent array of objects; lives in this function 
  // return a random opponent from that array 
}
const setOpponent = (opponent) => {
  // update game state with new opponent
  // update visual box to right of TTT game with opponent data, including power level  
}

const getDumbOpponentMove = (gameState) => { 
  // HELP ME! use getEmptySquares!  
  // your code goes here
  //return emptySquares[randomChoice]
}

const resetGameState = (gameState, newGameState) => {
  gameState.board = newGameState.board
  gameState.playerTurn = newGameState.playerTurn
  gameState.playing = newGameState.playing
  gameState.winner = newGameState.winner
  gameState.opponent = newGameState.opponent
}

function move(gameState, squareIndex) {
  gameState.board = gameState.board.replaceAt(squareIndex, gameState.playerTurn);
}

const setPlayerTurn = (gameState, player) => {
  if (player) {
    gameState.playerTurn = player
  } else {
    gameState.playerTurn = gameState.playerTurn === 'X' ? 'O' : 'X'
  }
}

const checkGameStatus = (board) => {
  // top row
  if (
    board.charAt(0) !== '-' &&
    (board.charAt(0) === board.charAt(1)) &&
    (board.charAt(1) === board.charAt(2))
  ) {
    return WIN
  }
  // middle row
  if (
    board.charAt(3) !== '-' &&
    (board.charAt(3) === board.charAt(4)) &&
    (board.charAt(4) === board.charAt(5))
  ) {
    return WIN
  }
  // right row
  if (
    board.charAt(6) !== '-' &&
    (board.charAt(6) === board.charAt(7)) &&
    (board.charAt(7) === board.charAt(8))
  ) {
    return WIN
  }
  // left col
  if (
    board.charAt(0) !== '-' &&
    (board.charAt(0) === board.charAt(3)) &&
    (board.charAt(3) === board.charAt(6))
  ) {
    return WIN
  }
  // middle col
  if (
    board.charAt(1) !== '-' &&
    (board.charAt(1) === board.charAt(4)) &&
    (board.charAt(4) === board.charAt(7))
  ) {
    return WIN
  }
  // right col
  if (
    board.charAt(6) !== '-' &&
    (board.charAt(6) === board.charAt(7)) &&
    (board.charAt(7) === board.charAt(8))
  ) {
    return WIN
  }
  // left-top-start diagonal
  if (
    board.charAt(6) !== '-' &&
    (board.charAt(6) === board.charAt(7)) &&
    (board.charAt(7) === board.charAt(8))
  ) {
    return WIN
  }
  // right-top-start diagonal
  if (
    board.charAt(6) !== '-' &&
    (board.charAt(6) === board.charAt(7)) &&
    (board.charAt(7) === board.charAt(8))
  ) {
    return WIN
  }

  if (getEmptySquares(board).length !== 0) {
    return IN_PROGRESS
  } else { // 
    return TIE
  }

}


const play = () => {
  let playerTurns = 0
  const gameState = {}
  let gameStatus;
  console.log("now playing TTT")
  resetGameState(gameState, DEFAULT_GAME_STATE)
  gameState.playing = true

  while (gameState.playing) {
    playerTurns += 1
    const turnMove = getDumbOpponentMove(gameState)
    move(gameState, turnMove)
    gameStatus = checkGameStatus(gameState.board)
    if (gameStatus !== IN_PROGRESS) {
      break;
    }
    // change player turn
    setPlayerTurn(gameState)
  }

  console.log("play done, game state:", gameState)

  if (gameStatus === WIN) {
    console.info(`\n${gameState.playerTurn} wins`)
    gameState.winner = true
  } else {
    console.info("The Game is a tie!")
  }

  gameState.playing = false
}
</script>
<script id="a-duck-strikes-back">

// arrow down key event names
const UP = "ArrowUp";
const DOWN = "ArrowDown";
const LEFT = "ArrowLeft";
const RIGHT = "ArrowRight";
const CANVAS_DIMENSIONS = 500
const STARTING_LOCATION = [250, 250]

// the pond ends 25 pixels from canvas edge
const SAFE_DUCK_DISTANCE = 25
// canvas boundaries
const POND_BOUNDARIES = {north: {y: SAFE_DUCK_DISTANCE}, south: { y: 500 - SAFE_DUCK_DISTANCE}, east: {x: 500 - SAFE_DUCK_DISTANCE}, west: {x: SAFE_DUCK_DISTANCE} } 


document.addEventListener("DOMContentLoaded", (event) => {
  const gameState = {
    score: 0,
    playing: false,
    size: 20,
    location: STARTING_LOCATION,
    flowerLocation: [50, 50],
    velocity: 5,
    duckImage: null,
    flowerImage: null
  };

  function setDuckImage() {
    const duckImage = new Image();
    gameState.duckImage = duckImage;
    gameState.duckImage.src = "../img/duck.png"; // Set source path
    gameState.duckImage.id = "duck-image";
    gameState.duckImage.tabIndex = "1";
  }

  function setFlowerImage() {
    const flowerImage = new Image();
    gameState.flowerImage = flowerImage;
    gameState.flowerImage.src = "../img/flower.jpeg"; // Set source path
    gameState.flowerImage.id = "flower-image";
  }

  setDuckImage()
  setFlowerImage()

  document.getElementById("play-duck-game").addEventListener("click", playDuckGame);
  document.getElementById("clear-duck-game").addEventListener("click", resetGameState);

  function isInsidePond() {
    // the duck must stay in the pond
    // returns true if duck is in pond

    // check north pond boundary
    if (gameState.location[1] - gameState.velocity < POND_BOUNDARIES.north.y) {
      console.info("WILL HIT NORTH BOUNDARY")  
      return false
    }
    // check south pond boundary
    if (gameState.location[1] + gameState.velocity > POND_BOUNDARIES.south.y) {
      console.info("WILL HIT SOUTH BOUNDARY")   
      return false
    }
    // check east pond boundary
    if (gameState.location[0] + gameState.velocity > POND_BOUNDARIES.east.x) {
      console.info("WILL HIT EAST BOUNDARY") 
      return false
    }
    // check west pond boundary
    if (gameState.location[0] - gameState.velocity < POND_BOUNDARIES.west.x) {
      console.info("WILL HIT WEST BOUNDARY") 
      return false
    }

    // handleUpdates();

    return true // duck in pond
   
  }

  function handleImageUpdates() {
    drawDuck();
    drawFlower();
  }

  function down(keyEvent) {
    // moves duck

    // only move duck if playing game
    if (!gameState.playing) return;

    // duck cannot leave pond
    if (!isInsidePond()) {
      return
    }
   
    if (keyEvent.code === UP) {
      // move duck up
      updateLocation([
        gameState.location[0],
        gameState.location[1] - gameState.velocity
      ]);
    } else if (keyEvent.code === DOWN) {
      // move duck down
      updateLocation([
        gameState.location[0],
        gameState.location[1] + gameState.velocity
      ]);
    } else if (keyEvent.code === LEFT) {
      // move duck left
      updateLocation([
        gameState.location[0] - gameState.velocity,
        gameState.location[1]
      ]);
    } else if (keyEvent.code === RIGHT) {
      // move duck right
      updateLocation([
        gameState.location[0] + gameState.velocity,
        gameState.location[1]
      ]);
    }
    console.log("location after change", gameState.location); 
    handleImageUpdates(); 
  }

  function updateLocation(newLocation) {
    gameState.location = newLocation;
  }

  function gameOver() {
    gameState.playing = false;
  }

  function gameStart() {
    gameState.playing = true;
  }

  function playDuckGame() {
    console.info("playing");
    gameStart();
    handleImageUpdates()
    console.info("gameState", gameState)
  }

  function incrementScore() {
    gameState.score = gameState.score + 1;
  }

  function drawDuck() {
    const canvas = document.getElementById('duck-hunt-canvas');
    const context = canvas.getContext('2d');
    context.drawImage(
        gameState.duckImage,
        gameState.location[0],
        gameState.location[1],
        gameState.size,
        gameState.size
      );
  }

  const drawFlower = () => {
    const canvas = document.getElementById('duck-hunt-canvas');
    const context = canvas.getContext('2d');
    context.drawImage(
        gameState.flowerImage,
        gameState.flowerLocation[0],
        gameState.flowerLocation[1],
        gameState.size,
        gameState.size
      );
  }

  function begin() {
    console.info("drawing");
    document.body.onkeydown = (event) => {
      down(event)
      // draw images after key change
    };

  }
  begin();
});

</script>
    <div id="snakes-and-mongooses-game-section">
        <table id="board">
            <tr class="row">
                <td class="cell mongoose" id="0" onclick="clickCell('0')"></td>
                <td class="cell snake" id="1" onclick="clickCell('1')"></td>
                <td class="cell mongoose" id="2" onclick="clickCell('2')"></td>
            </tr>
            <tr class="row">
                <td class="cell snake" id="3" onclick="clickCell('3')"></td>
                <td class="cell mongoose" id="4" onclick="clickCell('4')"></td>
                <td class="cell mongoose" id="5" onclick="clickCell('5')"></td>
            </tr>
            <tr class="row">
                <td class="cell snake" id="6" onclick="clickCell('6')"></td>
                <td class="cell snake" id="7" onclick="clickCell('7')"></td>
                <td class="cell snake" id="8" onclick="clickCell('8')"></td>
            </tr>
        </table>
        <span>
            <button id="play-button" onclick="">
                Play TTT
            </button>
        </span>
        <p id="game-state-message">Press the 'Play' button And Click a square</p>
    </div>

    <div id="a-duck-strikes-back-game-section">

      <div id="duck-game">
        <center>
          <h2>Revenge of the Ducks: A Duck Strikes Back</h2>
        </center>
          <div id="game-info">
            <span>
              {% image "./img/duck.png", "a cunning duck", "100vw", "duck-score-image", "png", "../img" %}
              {% image "./img/flower.jpeg", "a mysterious glowing flower", "100vw", "flower-for-duck-score-image", "jpeg", "../img" %}
              <h4>Score</h4>
              <h4 id="score"></h4>
              <h4 id="instructions">Hit 'Play' And Press the left/right/up/down arrow keys to move the duck</h4>
            </span>
            <button type="button" id="play-duck-game">Play</button>
            <button type="button" id="clear-duck-game">Clear Game</button>
          </div>
          <center>
            <canvas id="duck-hunt-canvas" width="500" height="500"></canvas>
          </center>
        </div>
    </div>